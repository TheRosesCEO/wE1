<html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WE Game Interface</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #00ffff;
            --secondary-color: #ff00ff;
            --bg-dark: #121212;
            --text-color: #ffffff;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: var(--bg-dark);
            color: var(--text-color);
            overflow: hidden;
        }

        /* Animated WE Logo */
        .animated-logo {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 25vw;
            font-weight: bold;
            display: flex;
            z-index: 10;
        }

        .animated-logo span {
            display: inline-block;
            opacity: 0.2;
            animation: logoReveal 2s ease-in-out infinite;
        }

        .animated-logo span:first-child {
            animation-delay: 0s;
            color: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
        }

        .animated-logo span:last-child {
            animation-delay: 1s;
            color: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
        }

        @keyframes logoReveal {
            0%, 100% { opacity: 0; transform: scale(0.5); }
            50% { opacity: 1; transform: scale(1.2); }
        }

        /* Header */
        .header {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: rgba(0, 0, 0, 0.7);
            z-index: 20;
        }

        .logo {
            font-size: 24px;
            color: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            text-shadow: 0 0 10px var(--primary-color);
        }

        .team-section {
            display: flex;
            align-items: center;
        }

        .team-name {
            margin-right: 20px;
            color: var(--text-color);
        }

        .score {
            font-size: 20px;
            color: var(--secondary-color);
            font-weight: bold;
        }

        /* Sliding Banner */
        .sliding-banner {
            position: fixed;
            top: 70px;
            left: 0;
            width: 100%;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            color: var(--bg-dark);
            padding: 10px 0;
            text-align: center;
            overflow: hidden;
            z-index: 15;
            font-weight: bold;
            font-size: 18px;
        }

        .banner-content {
            display: inline-block;
            white-space: nowrap;
            animation: slideBanner 20s linear infinite;
        }

        @keyframes slideBanner {
            0% { transform: translateX(100%); }
            100% { transform: translateX(-100%); }
        }

        /* Vertical Navigation */
        .vertical-nav {
            position: fixed;
            left: 20px;
            top: 120px;
            bottom: 20px;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            z-index: 30;
            gap: 10px;
        }

        .nav-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .nav-icon i {
            font-size: 18px;
            color: var(--text-color);
            transition: transform 0.3s ease;
        }

        .nav-icon:hover {
            transform: scale(1.1) rotate(5deg);
        }

        /* Overlay Containers */
        .overlay-container {
            position: fixed;
            top: 120px;
            left: 120px;
            right: 20px;
            bottom: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            display: none;
            padding: 20px;
            backdrop-filter: blur(10px);
            z-index: 25;
            align-items: center;
            justify-content: center;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
        }

        .overlay-container.active {
            display: flex;
        }
      .overlay-container {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.3s ease, transform 0.3s ease;
}

.overlay-container.active {
    opacity: 1;
    transform: translateY(0);
}


        /* Specific Overlay Styles */
        .overlay-container.game { background: linear-gradient(135deg, #ff6b6b, #4ecdc4); }
        .overlay-container.profile { background: linear-gradient(135deg, #845ec2, #ff6f91); }
        .overlay-container.leaderboard { background: linear-gradient(135deg, #ffc75f, #ff9671); }
        .overlay-container.settings { background: linear-gradient(135deg, #00d2fc, #2a4b8d); }
        .overlay-container.dice { background: linear-gradient(135deg, #45f882, #1aa7ec); }

        /* Prompt Container */
        .prompt-container {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.9);
            color: var(--text-color);
            padding: 15px 20px;
            border-radius: 10px;
            font-size: 18px;
            font-weight: bold;
            box-shadow: 0 0 15px rgba(255, 255, 255, 0.3);
            z-index: 50; /* Highest Z-index */
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        .prompt-container.hidden {
            opacity: 0;
            transform: translate(-50%, 50px);
            pointer-events: none;
        }

        .prompt-container.visible {
            opacity: 1;
            transform: translateX(-50%);
        }




/* Leaderboard Section */
.leaderboard-content {
    width: 80%;
    margin: auto;
    text-align: center;
    color: var(--text-color);
}

.leaderboard-heading {
    font-size: 28px;
    color: var(--primary-color);
    margin-bottom: 20px;
}

.leaderboard-list {
    list-style: none;
    padding: 0;
    margin: 20px 0;
}

.leaderboard-item {
    display: flex;
    justify-content: space-between;
    padding: 10px 20px;
    margin-bottom: 10px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 5px;
}

.leaderboard-item:hover {
    background: rgba(255, 255, 255, 0.2);
}

.leaderboard-rank {
    font-weight: bold;
    color: var(--secondary-color);
}

.leaderboard-username,
.leaderboard-score {
    color: var(--text-color);
}

.refresh-leaderboard {
    padding: 10px 20px;
    margin-top: 10px;
    border: none;
    background: var(--primary-color);
    color: var(--bg-dark);
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s ease;
}

.refresh-leaderboard:hover {
    background: var(--secondary-color);
}


 .settings-container {
        width: 90%;
        max-width: 1000px;
        background: linear-gradient(145deg, rgba(26, 26, 61, 0.9), rgba(18, 18, 30, 0.9));
        border-radius: 15px;
        border: 2px solid #ff00ff;
        box-shadow: 0 0 20px #ff00ff;
        padding: 30px;
        color: #fff;
    }

    .settings-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .settings-header h1 {
        margin: 0;
        font-size: 2.5em;
    }

    .close-btn {
        background: transparent;
        border: 2px solid #00ffcc;
        color: #00ffcc;
        padding: 10px;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

    .close-btn:hover {
        background: #00ffcc;
        color: #0d0d1e;
        box-shadow: 0 0 15px #00ffcc;
    }

    .settings-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 30px;
    }

    .settings-section {
        background: rgba(30, 34, 41, 0.5);
        border-radius: 10px;
        padding: 20px;
        border: 1px solid rgba(255, 0, 255, 0.3);
    }

    .settings-section h2 {
        color: #ff00ff;
        border-bottom: 2px solid #ff00ff;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }

    .setting-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .setting-item label {
        color: #00ffcc;
    }

    .slider {
        flex-grow: 1;
        margin: 0 15px;
        accent-color: #ff00ff;
    }

    .toggle-switch {
        position: relative;
    }

    .toggle-switch input {
        opacity: 0;
        position: absolute;
    }

    .toggle-label {
        display: block;
        width: 60px;
        height: 30px;
        background: #333;
        border-radius: 15px;
        position: relative;
        cursor: pointer;
        transition: 0.3s;
    }

    .toggle-label::after {
        content: '';
        position: absolute;
        width: 26px;
        height: 26px;
        border-radius: 50%;
        background: #ff00ff;
        top: 2px;
        left: 2px;
        transition: 0.3s;
    }

    .toggle-switch input:checked + .toggle-label {
        background: #00ffcc;
    }

    .toggle-switch input:checked + .toggle-label::after {
        transform: translateX(30px);
        background: #0d0d1e;
    }

    .cyberpunk-select {
        background: #1a1a3d;
        color: #00ffcc;
        border: 1px solid #ff00ff;
        padding: 10px;
        border-radius: 5px;
    }

    .difficulty-selector {
        display: flex;
        gap: 10px;
    }

    .difficulty-btn {
        background: rgba(0, 0, 0, 0.5);
        border: 1px solid #ff00ff;
        color: #fff;
        padding: 10px 15px;
        border-radius: 5px;
        transition: all 0.3s ease;
    }

    .difficulty-btn.active {
        background: #ff00ff;
        color: #0d0d1e;
    }

    .difficulty-btn:hover {
        background: #00ffcc;
        color: #0d0d1e;
    }

    .settings-actions {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 30px;
    }

    .save-btn, .reset-btn {
        padding: 15px 30px;
        border-radius: 8px;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    .save-btn {
        background: linear-gradient(90deg, #ff00ff, #00ffcc);
        color: #0d0d1e;
    }

    .reset-btn {
        background: transparent;
        border: 2px solid #ff00ff;
        color: #ff00ff;
    }

    .save-btn:hover {
        box-shadow: 0 0 20px #00ffcc;
    }

    .reset-btn:hover {
        background: rgba(255, 0, 255, 0.2);
    }



      .toast {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--primary-color);
    color: var(--bg-dark);
    padding: 10px 20px;
    border-radius: 5px;
    display: none;
}
.toast.show {
    display: block;
    animation: fadeInOut 3s ease;
}
@keyframes fadeInOut {
    0% { opacity: 0; transform: translateY(20px); }
    20%, 80% { opacity: 1; transform: translateY(0); }
    100% { opacity: 0; transform: translateY(20px); }
}



/* Profile Section */
.profile-container {
    max-width: 800px;
    margin: 0 auto;
    background: #1a1a1a;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 20px #333;
}

.profile-container .section {
    margin-bottom: 20px;
    padding: 10px;
    background: #2a2a2a;
    border-radius: 8px;
    box-shadow: 0 0 10px #222;
}

.profile-container .section h2 {
    font-size: 20px;
    color: #ff00ff;
    margin-bottom: 10px;
    text-shadow: 0 0 10px #ff00ff;
}

.profile-container .section p {
    margin: 5px 0;
    color: #ccc;
    font-size: 14px;
}

.profile-container .cyberpunk-input {
    display: block;
    width: 100%;
    padding: 10px;
    margin-top: 10px;
    background: #0d0d0d;
    border: 2px solid #ff00ff;
    border-radius: 5px;
    color: #fff;
    font-size: 16px;
    transition: border-color 0.3s;
}

.profile-container .cyberpunk-input:focus {
    border-color: #fff;
    outline: none;
}

.profile-container .actions {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
}

.profile-container .actions .save-btn,
.profile-container .actions .reset-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    transition: background 0.3s;
}

.profile-container .actions .save-btn {
    background: #ff00ff;
    color: #fff;
}

.profile-container .actions .save-btn:hover {
    background: #d900d9;
}

.profile-container .actions .reset-btn {
    background: #333;
    color: #fff;
}

.profile-container .actions .reset-btn:hover {
    background: #444;
}


/* DICE Section */
        .dice-container {
            width: 100%;
            height: 300px;
            position: relative;
            display: flex;
            justify-content: center; /* Center the dice together */
            align-items: center;
            margin-top: 50px;
        }

        .dice {
            width: 120px;
            height: 120px;
            background: linear-gradient(135deg, #ff007f, #ff7700);
            border: 2px solid #ff00ff;
            border-radius: 15px;
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
            box-shadow: 0 0 10px #ff007f, 0 0 20px #ff00ff, 0 0 30px #ff007f;
            position: absolute;
        }

        .dot {
            width: 20px;
            height: 20px;
            background-color: #fff;
            border-radius: 50%;
            justify-self: center;
            align-self: center;
        }

        .button-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 30px;
        }

        button {
            padding: 20px 30px;
            background-color: #ff007f;
            color: white;
            border: fff 5px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            box-shadow: 0 0 7px #ff007f, 0 0 20px #ff00ff;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #ff00ff;
        }

        /* Pop-Up Styling */
        .popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #ff007f, #ff7700);
            color: #fff;
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 0 10px #ff007f, 0 0 20px #ff00ff;
            text-align: center;
            z-index: 1000;
            display: none;
        }

        .popup.visible {
            display: block;
        }


.animated-logo {
    font-family: Arial, sans-serif;
    font-size: 5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #FFF;
    position: relative;
    width: 80%;
    height: 50vh; /* Reduced from 80vh */
    overflow: hidden;
    background-color: TRANSPARENT;
}

/* Symbol container */
.symbol-container {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 30%; /* Added to push content down */
}

/* General styles for both symbols */
.symbol {
    position: absolute;
    font-size: 10rem; /* Reduced from 15rem */
    opacity: 0.2; /* Initial opacity */
    animation: pulse 3s infinite ease-in-out;
}

/* Female symbol styling */
.symbol-female {
    color: #0077ff;
    transform: translate(-120%, -30%) rotate(15deg); /* Adjusted positioning */
}

/* Male symbol styling */
.symbol-male {
    color: #E6E6E6;
    transform: translate(120%, 30%) rotate(-15deg); /* Adjusted positioning */
    animation-delay: 1.5s; /* Offset pulsing */
}

/* Centered "WE" text */
.symbol-text {
    position: relative;
    font-size: 8rem; /* Reduced from 11rem */
    font-weight: bold;
    color: #FFF;
    text-shadow: 2px 2px 10px rgba(0, 0, 0, 0.9);
    z-index: 10;
}

/* Pulsing animation for both symbols */
@keyframes pulse {
    0%, 100% {
        transform: scale(1) translate(0, 0);
        opacity: 0.3;
    }
    50% {
        transform: scale(2.5) translate(0, 0);
        opacity: 0.5;
    }
}

/* Responsive adjustments for smaller viewports */
@media (max-width: 768px) {
    .symbol-female, .symbol-male {
        font-size: 8rem; /* Smaller symbol size */
    }
    .symbol-text {
        font-size: 9rem; /* Smaller text size */
    }
    .symbol-container {
        margin-top: 40%; /* Additional adjustment for mobile */
    }
}
  @media (max-width: 480px) {
    .symbol-female, .symbol-male {
      font-size: 12rem; /* Further reduce symbol size */
    }

    .symbol-text {
      font-size: 8rem; /* Further reduce text size */
    }
  }


    </style>
</head>
<body>

            
    


    <!-- Header -->
    <header class="header">
        <div class="logo">WE Game</div>
        <div class="team-section">
            <div class="team-name">Sara &amp; Teddy</div>
            <div class="score">Score: 6337</div>
        </div>
    </header>

    <!-- Sliding Banner -->
    <div class="sliding-banner">
        <div class="banner-content">
            Welcome to the Ultimate Couples Gaming Experience Designed to Push Boundaries and Promote Relationship Growth! Get ready for an epic adventure! 🎮✨
        </div>
        
    <!-- Animated WE Logo -->
    <div class="animated-logo" style="display: none;">
  <div class="symbol-container">
    <div class="symbol symbol-female">♀</div>
    <div class="symbol symbol-male">♂</div>
    <div class="symbol-text">WE</div>
  </div>
</div>

    <!-- Vertical Navigation -->
    <nav class="vertical-nav">
        <div class="nav-icon game-nav" data-overlay="game" aria-label="Game Section" tabindex="0">
            <i class="fas fa-gamepad"></i>
        </div>
        <div class="nav-icon profile-nav" data-overlay="profile" aria-label="Game Section" tabindex="0">
            <i class="fas fa-user"></i>
        </div>
        <div class="nav-icon leaderboard-nav" data-overlay="leaderboard" aria-label="Game Section" tabindex="0">
            <i class="fas fa-trophy"></i>
        </div>
        <div class="nav-icon settings-nav" data-overlay="settings" aria-label="Game Section" tabindex="0">
            <i class="fas fa-cog"></i>
        </div>
        <div class="nav-icon dice-nav" data-overlay="dice" aria-label="Game Section" tabindex="0">
            <i class="fas fa-dice"></i>
        </div>
    </nav>

    <!-- Overlay Containers -->
    <div id="game-overlay" class="overlay-container game">
     
         <div class="dice-container">
        <div class="dice" id="dice1" style="left: 35%"><div class="dot" style="visibility: visible;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: visible;"></div></div> <!-- Start both dice visible with small gap -->
        <div class="dice" id="dice2" style="left: 60%"><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: visible;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div></div> <!-- 30px gap between the two dice -->
    </div>
    <div class="button-container">
        <button id="rollDiceButton">Roll Dice</button>
        <button id="viewHistoryButton">View History</button>
        <button id="viewTutorialButton">View Tutorial</button>
    </div>

    <div class="popup" id="popup">Category: <strong>Edge Play</strong><br>Multiplier: <strong>x1</strong></div>

            
 <!-- Profile Section -->
<div id="profile-overlay" class="overlay-container profile">
    <div class="profile-content">
        <h2 class="profile-heading">Your Profile</h2>
        <div class="profile-details">
            <div class="profile-picture">
                <img src="https://via.placeholder.com/100" alt="Profile Picture" class="profile-img">
            </div>
            <div class="profile-info">
                <p><strong>Username:</strong> Gamer123</p>
                <p><strong>Email:</strong> gamer123@example.com</p>
                <p><strong>Games Played:</strong> 45</p>
                <p><strong>Achievements:</strong> 10 Trophies</p>
            </div>
        </div>
        <div class="profile-actions">
            <button class="btn edit-profile">Edit Profile</button>
            <button class="btn logout">Logout</button>
        </div>
    </div>
</div>

<!-- Leaderboard Section -->
<div id="leaderboard-overlay" class="overlay-container leaderboard active">
    <div class="leaderboard-content">
        <h2 class="leaderboard-heading">Leaderboard</h2>
        <ul class="leaderboard-list">
            <li class="leaderboard-item">
                <span class="leaderboard-rank">1.</span>
                <span class="leaderboard-username">PlayerOne</span>
                <span class="leaderboard-score">9450</span>
            </li>
            <li class="leaderboard-item">
                <span class="leaderboard-rank">2.</span>
                <span class="leaderboard-username">ChampionX</span>
                <span class="leaderboard-score">8920</span>
            </li>
            <li class="leaderboard-item">
                <span class="leaderboard-rank">3.</span>
                <span class="leaderboard-username">QuickSilver</span>
                <span class="leaderboard-score">8770</span>
            </li>
            <!-- Additional Players -->
        </ul>
        <button class="btn refresh-leaderboard">Refresh</button>
    </div>
</div>

<!-- Settings Section -->
<div id="settings-overlay" class="overlay-container settings">
    <div class="settings-content">
        <h2 class="settings-heading">Settings</h2>
        <form class="settings-form">
            <div class="form-group">
                <label for="sound-toggle">Sound</label>
                <input type="checkbox" id="sound-toggle" checked="">
            </div>
            <div class="form-group">
                <label for="notifications-toggle">Notifications</label>
                <input type="checkbox" id="notifications-toggle" checked="">
            </div>
            <div class="form-group">
                <label for="difficulty-level">Difficulty</label>
                <select id="difficulty-level">
                    <option value="easy">Easy</option>
                    <option value="medium" selected="">Medium</option>
                    <option value="hard">Hard</option>
                </select>
            </div>
            <div class="settings-actions">
                <button type="submit" class="btn save-settings">Save Settings</button>
                <button type="reset" class="btn reset-settings">Reset</button>
            </div>
        </form>
    </div>
</div>


    <!-- Floating Prompt -->
    <div id="game-prompt" class="prompt-container hidden">
        <p id="prompt-text">Avoid the traps! ⚠️</p>
    </div>

    <script>
       document.addEventListener('DOMContentLoaded', () => {
    // Variables for navigation, overlays, and floating prompt
    const navIcons = document.querySelectorAll('.nav-icon');
    const overlays = document.querySelectorAll('.overlay-container');
    const animatedLogo = document.querySelector('.animated-logo');
    const promptContainer = document.getElementById('game-prompt');
    const promptText = document.getElementById('prompt-text');

    // Global game state
    const gameState = {
        score: 6337,
        level: 1,
        settings: {
            sound: true,
            notifications: true,
            difficulty: 'medium',
        },
    };

    // Prompt messages by game level
    const promptMessages = {
        level1: ["Find the hidden key! 🗝️", "Avoid the traps! ⚠️"],
        level2: ["Cooperate to open the door! 🔑", "Defeat the boss together! 🐉"],
    };

    // Dynamic prompt generator
    function getDynamicPrompt() {
        const levelPrompts = promptMessages[`level${gameState.level}`] || [];
        return levelPrompts[Math.floor(Math.random() * levelPrompts.length)] || "Explore and have fun!";
    }

    // Floating prompt system
    function showDynamicPrompt() {
        promptText.textContent = getDynamicPrompt();
        promptContainer.classList.remove('hidden');
        promptContainer.classList.add('visible');

        // Hide the prompt after 4 seconds
        setTimeout(() => {
            promptContainer.classList.remove('visible');
            promptContainer.classList.add('hidden');
        }, 4000);
    }

    // Cycle through prompts every 6 seconds
    setInterval(showDynamicPrompt, 6000);

    // Overlay visibility toggle
    navIcons.forEach((icon) => {
        icon.setAttribute('tabindex', '0'); // Make icons focusable for keyboard users
        icon.addEventListener('click', () => {
            const overlayId = `${icon.dataset.overlay}-overlay`;
            const targetOverlay = document.getElementById(overlayId);

            // Hide all overlays and show the clicked one
            overlays.forEach((overlay) => overlay.classList.remove('active'));
            targetOverlay.classList.add('active');

            // Hide the animated logo
            animatedLogo.style.display = 'none';
        });

        // Enable keyboard navigation
        icon.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                icon.click();
            }
        });
    });

    // Reset overlays when clicking the logo
    animatedLogo.addEventListener('click', () => {
        overlays.forEach((overlay) => overlay.classList.remove('active'));
        animatedLogo.style.display = 'flex';
    });

    // Leaderboard: Refresh and sorting
    const refreshButton = document.querySelector('.refresh-leaderboard');
    const leaderboardList = document.querySelector('.leaderboard-list');

    function sortLeaderboard() {
        const leaderboardItems = [...document.querySelectorAll('.leaderboard-item')];
        leaderboardItems.sort((a, b) => {
            const scoreA = parseInt(a.querySelector('.leaderboard-score').textContent, 10);
            const scoreB = parseInt(b.querySelector('.leaderboard-score').textContent, 10);
            return scoreB - scoreA; // Descending order
        });

        leaderboardList.innerHTML = ''; // Clear current list
        leaderboardItems.forEach((item) => leaderboardList.appendChild(item));
    }

    if (refreshButton) {
        refreshButton.addEventListener('click', () => {
            alert("Refreshing Leaderboard...");
            // Simulate adding a new entry
            const newPlayer = document.createElement('li');
            newPlayer.classList.add('leaderboard-item');
            newPlayer.innerHTML = `
                <span class="leaderboard-rank">New</span>
                <span class="leaderboard-username">RookiePlayer</span>
                <span class="leaderboard-score">${Math.floor(Math.random() * 10000)}</span>
            `;
            leaderboardList.appendChild(newPlayer);

            // Sort leaderboard after adding a new player
            sortLeaderboard();
        });
    }

    // Profile: Edit profile and logout actions
    const editProfileButton = document.querySelector('.edit-profile');
    const logoutButton = document.querySelector('.logout');

    if (editProfileButton) {
        editProfileButton.addEventListener('click', () => {
            alert("Edit Profile functionality coming soon!");
        });
    }

    if (logoutButton) {
        logoutButton.addEventListener('click', () => {
            if (confirm("Are you sure you want to logout?")) {
                alert("You have been logged out.");
            }
        });
    }

    // Settings: Save and reset actions
    const settingsForm = document.querySelector('.settings-form');

    if (settingsForm) {
        settingsForm.addEventListener('submit', (event) => {
            event.preventDefault();
            // Update game state with new settings
            const sound = document.getElementById('sound-toggle').checked;
            const notifications = document.getElementById('notifications-toggle').checked;
            const difficulty = document.getElementById('difficulty-level').value;

            gameState.settings = { sound, notifications, difficulty };

            showToast("Settings saved successfully!");
        });

        settingsForm.addEventListener('reset', () => {
            showToast("Settings reset to defaults!");
        });
    }

    // Toast notification system
    function showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.textContent = message;
        document.body.appendChild(toast);

        toast.classList.add('show');
        setTimeout(() => toast.remove(), 3000); // Remove toast after 3 seconds
    }
});
    const dice1 = document.getElementById("dice1");
        const dice2 = document.getElementById("dice2");
        const rollDiceButton = document.getElementById("rollDiceButton");
        const viewHistoryButton = document.getElementById("viewHistoryButton");
        const viewTutorialButton = document.getElementById("viewTutorialButton");
        const popup = document.getElementById("popup");

        const dotPatterns = {
            1: [4],
            2: [0, 8],
            3: [0, 4, 8],
            4: [0, 2, 6, 8],
            5: [0, 2, 4, 6, 8],
            6: [0, 2, 3, 5, 6, 8],
        };
                   
        const categories = ["Dom / Sub", "Edge Play", " Emotional Intelligence", "Bondage / Discipline", "Sadism / masochism", "Role play / Sensory play"];
        let history = [];

        const setDiceFace = (diceElement, value) => {
            diceElement.innerHTML = "";
            const pattern = dotPatterns[value];
            for (let i = 0; i < 9; i++) {
                const dot = document.createElement("div");
                dot.classList.add("dot");
                if (pattern.includes(i)) dot.style.visibility = "visible";
                else dot.style.visibility = "hidden";
                diceElement.appendChild(dot);
            }
        };

        const randomizeKeyframes = () => {
            const keyframes = [];
            for (let i = 0; i < 6; i++) {
                const randomX = Math.random() * 100 - 50; // Range: -60vw to 50vw
                const randomY = Math.random() * 100 - 50; // Range: -50vh to 50vh
                const randomRotation = Math.random() * 360; // 0 to 360 degrees
                keyframes.push({ transform: `translate(${randomX}vw, ${randomY}vh) rotate(${randomRotation}deg)` });
            }
            keyframes.push({ transform: "translate(0, 0) rotate(0deg)" }); // End at center
            return keyframes;
        };

        const rollDice = () => {
            // Display initial dice faces 3 and 4 before rolling
            setDiceFace(dice1, 3);
            setDiceFace(dice2, 4);

            // Roll dice with random movement across the screen
            const dice1Keyframes = randomizeKeyframes();
            const dice2Keyframes = randomizeKeyframes();

            dice1.animate(dice1Keyframes, { duration: 2000, easing: "ease-out" });
            dice2.animate(dice2Keyframes, { duration: 3000, easing: "ease-out" });

            setTimeout(() => {
                const value1 = Math.floor(Math.random() * 6) + 1;
                const value2 = Math.floor(Math.random() * 6) + 1;

                setDiceFace(dice1, value1);
                setDiceFace(dice2, value2);

                const category = categories[value1 - 1];
                const multiplier = value2;
                history.push(`Category: ${category}, Multiplier: x${multiplier}`);
                showPopup(`Category: <strong>${category}</strong><br>Multiplier: <strong>x${multiplier}</strong>`);
            }, 3000); // Dice stop rolling after 3 seconds
        };

        const showPopup = (content) => {
            popup.innerHTML = content;
            popup.classList.add("visible");
            setTimeout(() => popup.classList.remove("visible"), 7000);
        };

        const showHistory = () => {
            const historyContent = history.length
                ? history.map((entry) => `<p>${entry}</p>`).join("")
                : "<p>No history yet!</p>";
            showPopup(`<h3>Roll History</h3>${historyContent}`);
        };

        const showTutorial = () => {
            showPopup(`
               <h3>How to Play</h3>
                <p>The first dice determines the category:</p>
                <ul>
                    <li>1: BDSM</li>
                    <li>2: Challenge</li>
                    <li>3: Bonus</li>
                    <li>4: Roleplay</li>
                    <li>5: Random</li>
                    <li>6: Porn challenge</li>
                </ul>
                <p>The second dice determines the multiplier for the category!</p>
            `);
        };

        rollDiceButton.addEventListener("click", rollDice);
        viewHistoryButton.addEventListener("click", showHistory);
        viewTutorialButton.addEventListener("click", showTutorial);

        setDiceFace(dice1, 3);
        setDiceFace(dice2, 4);

    </script>


</div><div id="game-overlay" class="overlay-container game active">
     
         <div class="dice-container">
        <div class="dice" id="dice1" style="left: 35%"><div class="dot" style="visibility: visible;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: visible;"></div></div> <!-- Start both dice visible with small gap -->
        <div class="dice" id="dice2" style="left: 60%"><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: visible;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div><div class="dot" style="visibility: hidden;"></div></div> <!-- 30px gap between the two dice -->
    </div>
    <div class="button-container">
        <button id="rollDiceButton">Roll Dice</button>
        <button id="viewHistoryButton">View History</button>
        <button id="viewTutorialButton">View Tutorial</button>
    </div>

    <div class="popup" id="popup">Category: <strong>Edge Play</strong><br>Multiplier: <strong>x1</strong></div>

            
 <!-- Profile Section -->
<div id="profile-overlay" class="overlay-container profile">
    <div class="profile-content">
        <h2 class="profile-heading">Your Profile</h2>
        <div class="profile-details">
            <div class="profile-picture">
                <img src="https://via.placeholder.com/100" alt="Profile Picture" class="profile-img">
            </div>
            <div class="profile-info">
                <p><strong>Username:</strong> Gamer123</p>
                <p><strong>Email:</strong> gamer123@example.com</p>
                <p><strong>Games Played:</strong> 45</p>
                <p><strong>Achievements:</strong> 10 Trophies</p>
            </div>
        </div>
        <div class="profile-actions">
            <button class="btn edit-profile">Edit Profile</button>
            <button class="btn logout">Logout</button>
        </div>
    </div>
</div>

<!-- Leaderboard Section -->
<div id="leaderboard-overlay" class="overlay-container leaderboard">
    <div class="leaderboard-content">
        <h2 class="leaderboard-heading">Leaderboard</h2>
        <ul class="leaderboard-list">
            <li class="leaderboard-item">
                <span class="leaderboard-rank">1.</span>
                <span class="leaderboard-username">PlayerOne</span>
                <span class="leaderboard-score">9450</span>
            </li>
            <li class="leaderboard-item">
                <span class="leaderboard-rank">2.</span>
                <span class="leaderboard-username">ChampionX</span>
                <span class="leaderboard-score">8920</span>
            </li>
            <li class="leaderboard-item">
                <span class="leaderboard-rank">3.</span>
                <span class="leaderboard-username">QuickSilver</span>
                <span class="leaderboard-score">8770</span>
            </li>
            <!-- Additional Players -->
        </ul>
        <button class="btn refresh-leaderboard">Refresh</button>
    </div>
</div>

<!-- Settings Section -->
<div id="settings-overlay" class="overlay-container settings">
    <div class="settings-content">
        <h2 class="settings-heading">Settings</h2>
        <form class="settings-form">
            <div class="form-group">
                <label for="sound-toggle">Sound</label>
                <input type="checkbox" id="sound-toggle" checked="">
            </div>
            <div class="form-group">
                <label for="notifications-toggle">Notifications</label>
                <input type="checkbox" id="notifications-toggle" checked="">
            </div>
            <div class="form-group">
                <label for="difficulty-level">Difficulty</label>
                <select id="difficulty-level">
                    <option value="easy">Easy</option>
                    <option value="medium" selected="">Medium</option>
                    <option value="hard">Hard</option>
                </select>
            </div>
            <div class="settings-actions">
                <button type="submit" class="btn save-settings">Save Settings</button>
                <button type="reset" class="btn reset-settings">Reset</button>
            </div>
        </form>
    </div>
</div>


    <!-- Floating Prompt -->
    <div id="game-prompt" class="prompt-container visible">
        <p id="prompt-text">Avoid the traps! ⚠️</p>
    </div>

    <script>
       document.addEventListener('DOMContentLoaded', () => {
    // Variables for navigation, overlays, and floating prompt
    const navIcons = document.querySelectorAll('.nav-icon');
    const overlays = document.querySelectorAll('.overlay-container');
    const animatedLogo = document.querySelector('.animated-logo');
    const promptContainer = document.getElementById('game-prompt');
    const promptText = document.getElementById('prompt-text');

    // Global game state
    const gameState = {
        score: 6337,
        level: 1,
        settings: {
            sound: true,
            notifications: true,
            difficulty: 'medium',
        },
    };

    // Prompt messages by game level
    const promptMessages = {
        level1: ["Find the hidden key! 🗝️", "Avoid the traps! ⚠️"],
        level2: ["Cooperate to open the door! 🔑", "Defeat the boss together! 🐉"],
    };

    // Dynamic prompt generator
    function getDynamicPrompt() {
        const levelPrompts = promptMessages[`level${gameState.level}`] || [];
        return levelPrompts[Math.floor(Math.random() * levelPrompts.length)] || "Explore and have fun!";
    }

    // Floating prompt system
    function showDynamicPrompt() {
        promptText.textContent = getDynamicPrompt();
        promptContainer.classList.remove('hidden');
        promptContainer.classList.add('visible');

        // Hide the prompt after 4 seconds
        setTimeout(() => {
            promptContainer.classList.remove('visible');
            promptContainer.classList.add('hidden');
        }, 4000);
    }

    // Cycle through prompts every 6 seconds
    setInterval(showDynamicPrompt, 6000);

    // Overlay visibility toggle
    navIcons.forEach((icon) => {
        icon.setAttribute('tabindex', '0'); // Make icons focusable for keyboard users
        icon.addEventListener('click', () => {
            const overlayId = `${icon.dataset.overlay}-overlay`;
            const targetOverlay = document.getElementById(overlayId);

            // Hide all overlays and show the clicked one
            overlays.forEach((overlay) => overlay.classList.remove('active'));
            targetOverlay.classList.add('active');

            // Hide the animated logo
            animatedLogo.style.display = 'none';
        });

        // Enable keyboard navigation
        icon.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                icon.click();
            }
        });
    });

    // Reset overlays when clicking the logo
    animatedLogo.addEventListener('click', () => {
        overlays.forEach((overlay) => overlay.classList.remove('active'));
        animatedLogo.style.display = 'flex';
    });

    // Leaderboard: Refresh and sorting
    const refreshButton = document.querySelector('.refresh-leaderboard');
    const leaderboardList = document.querySelector('.leaderboard-list');

    function sortLeaderboard() {
        const leaderboardItems = [...document.querySelectorAll('.leaderboard-item')];
        leaderboardItems.sort((a, b) => {
            const scoreA = parseInt(a.querySelector('.leaderboard-score').textContent, 10);
            const scoreB = parseInt(b.querySelector('.leaderboard-score').textContent, 10);
            return scoreB - scoreA; // Descending order
        });

        leaderboardList.innerHTML = ''; // Clear current list
        leaderboardItems.forEach((item) => leaderboardList.appendChild(item));
    }

    if (refreshButton) {
        refreshButton.addEventListener('click', () => {
            alert("Refreshing Leaderboard...");
            // Simulate adding a new entry
            const newPlayer = document.createElement('li');
            newPlayer.classList.add('leaderboard-item');
            newPlayer.innerHTML = `
                <span class="leaderboard-rank">New</span>
                <span class="leaderboard-username">RookiePlayer</span>
                <span class="leaderboard-score">${Math.floor(Math.random() * 10000)}</span>
            `;
            leaderboardList.appendChild(newPlayer);

            // Sort leaderboard after adding a new player
            sortLeaderboard();
        });
    }

    // Profile: Edit profile and logout actions
    const editProfileButton = document.querySelector('.edit-profile');
    const logoutButton = document.querySelector('.logout');

    if (editProfileButton) {
        editProfileButton.addEventListener('click', () => {
            alert("Edit Profile functionality coming soon!");
        });
    }

    if (logoutButton) {
        logoutButton.addEventListener('click', () => {
            if (confirm("Are you sure you want to logout?")) {
                alert("You have been logged out.");
            }
        });
    }

    // Settings: Save and reset actions
    const settingsForm = document.querySelector('.settings-form');

    if (settingsForm) {
        settingsForm.addEventListener('submit', (event) => {
            event.preventDefault();
            // Update game state with new settings
            const sound = document.getElementById('sound-toggle').checked;
            const notifications = document.getElementById('notifications-toggle').checked;
            const difficulty = document.getElementById('difficulty-level').value;

            gameState.settings = { sound, notifications, difficulty };

            showToast("Settings saved successfully!");
        });

        settingsForm.addEventListener('reset', () => {
            showToast("Settings reset to defaults!");
        });
    }

    // Toast notification system
    function showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.textContent = message;
        document.body.appendChild(toast);

        toast.classList.add('show');
        setTimeout(() => toast.remove(), 3000); // Remove toast after 3 seconds
    }
});
    const dice1 = document.getElementById("dice1");
        const dice2 = document.getElementById("dice2");
        const rollDiceButton = document.getElementById("rollDiceButton");
        const viewHistoryButton = document.getElementById("viewHistoryButton");
        const viewTutorialButton = document.getElementById("viewTutorialButton");
        const popup = document.getElementById("popup");

        const dotPatterns = {
            1: [4],
            2: [0, 8],
            3: [0, 4, 8],
            4: [0, 2, 6, 8],
            5: [0, 2, 4, 6, 8],
            6: [0, 2, 3, 5, 6, 8],
        };
                   
        const categories = ["Dom / Sub", "Edge Play", " Emotional Intelligence", "Bondage / Discipline", "Sadism / masochism", "Role play / Sensory play"];
        let history = [];

        const setDiceFace = (diceElement, value) => {
            diceElement.innerHTML = "";
            const pattern = dotPatterns[value];
            for (let i = 0; i < 9; i++) {
                const dot = document.createElement("div");
                dot.classList.add("dot");
                if (pattern.includes(i)) dot.style.visibility = "visible";
                else dot.style.visibility = "hidden";
                diceElement.appendChild(dot);
            }
        };

        const randomizeKeyframes = () => {
            const keyframes = [];
            for (let i = 0; i < 6; i++) {
                const randomX = Math.random() * 100 - 50; // Range: -60vw to 50vw
                const randomY = Math.random() * 100 - 50; // Range: -50vh to 50vh
                const randomRotation = Math.random() * 360; // 0 to 360 degrees
                keyframes.push({ transform: `translate(${randomX}vw, ${randomY}vh) rotate(${randomRotation}deg)` });
            }
            keyframes.push({ transform: "translate(0, 0) rotate(0deg)" }); // End at center
            return keyframes;
        };

        const rollDice = () => {
            // Display initial dice faces 3 and 4 before rolling
            setDiceFace(dice1, 3);
            setDiceFace(dice2, 4);

            // Roll dice with random movement across the screen
            const dice1Keyframes = randomizeKeyframes();
            const dice2Keyframes = randomizeKeyframes();

            dice1.animate(dice1Keyframes, { duration: 2000, easing: "ease-out" });
            dice2.animate(dice2Keyframes, { duration: 3000, easing: "ease-out" });

            setTimeout(() => {
                const value1 = Math.floor(Math.random() * 6) + 1;
                const value2 = Math.floor(Math.random() * 6) + 1;

                setDiceFace(dice1, value1);
                setDiceFace(dice2, value2);

                const category = categories[value1 - 1];
                const multiplier = value2;
                history.push(`Category: ${category}, Multiplier: x${multiplier}`);
                showPopup(`Category: <strong>${category}</strong><br>Multiplier: <strong>x${multiplier}</strong>`);
            }, 3000); // Dice stop rolling after 3 seconds
        };

        const showPopup = (content) => {
            popup.innerHTML = content;
            popup.classList.add("visible");
            setTimeout(() => popup.classList.remove("visible"), 7000);
        };

        const showHistory = () => {
            const historyContent = history.length
                ? history.map((entry) => `<p>${entry}</p>`).join("")
                : "<p>No history yet!</p>";
            showPopup(`<h3>Roll History</h3>${historyContent}`);
        };

        const showTutorial = () => {
            showPopup(`
               <h3>How to Play</h3>
                <p>The first dice determines the category:</p>
                <ul>
                    <li>1: BDSM</li>
                    <li>2: Challenge</li>
                    <li>3: Bonus</li>
                    <li>4: Roleplay</li>
                    <li>5: Random</li>
                    <li>6: Porn challenge</li>
                </ul>
                <p>The second dice determines the multiplier for the category!</p>
            `);
        };

        rollDiceButton.addEventListener("click", rollDice);
        viewHistoryButton.addEventListener("click", showHistory);
        viewTutorialButton.addEventListener("click", showTutorial);

        setDiceFace(dice1, 3);
        setDiceFace(dice2, 4);

    </script>


</div></div></body></html>
